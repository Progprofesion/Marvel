{"version":3,"file":"static/js/288.336e3dbc.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/search/Search.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt=\"Error\" />\r\n    )\r\n}\r\n\r\n\r\nexport default ErrorMessage;\r\n\r\n\r\n\r\n","import { useState, useEffect } from 'react';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki } = data;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/SpinnerMain';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './charList.scss';\n\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />;\n        case 'confirmed':\n            return <Component />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = async (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const renderItems = arr => {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n\n    // TransitionGroup работать не будет за счет постоянного пересоздания компонента\n    // разбор в следующем уроке\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport './charInfo.scss';\n\n\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props\n        if (!charId) {\n            return\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n};\n\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt=\"abyss\" style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.lenght > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true,\r\n        })\r\n    }\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './search.scss';\r\n\r\nconst CharSearchForm = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id='charName'\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder='Enter name' />\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component='div' className='char__search-error' name='charName' />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default CharSearchForm;\r\n\r\n\r\n\r\n","import { useState } from 'react';\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport Search from '../search/Search';\r\nimport decoration from '../../resources/img/vision.png';\r\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HelmetProvider>\r\n                <Helmet>\r\n                    <meta\r\n                        name=\"description\"\r\n                        content=\"Marvel information portal\"\r\n                    />\r\n                    <title>Marvel information portal</title>\r\n                </Helmet>\r\n                <ErrorBoundary>\r\n                    <RandomChar />\r\n                </ErrorBoundary>\r\n                <div className=\"char__content\">\r\n\r\n                    <ErrorBoundary>\r\n                        <CharList onCharSelected={onCharSelected} />\r\n                    </ErrorBoundary>\r\n\r\n                    <div>\r\n                        <ErrorBoundary>\r\n                            <CharInfo charId={selectedChar} />\r\n                        </ErrorBoundary>\r\n                        <ErrorBoundary>\r\n                            <Search />\r\n                        </ErrorBoundary>\r\n                    </div>\r\n                </div>\r\n                <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n            </HelmetProvider>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=6c650452b20502d82f38448f9724958d';\r\n    const _baseOffset = 210\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_thransformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const character = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _thransformCharacter(character.data.results[0])\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_thransformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    const _thransformCharacter = (character) => {\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: character.description ? `${character.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url,\r\n            comics: character.comics.items\r\n        }\r\n    }\r\n\r\n    return {\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic,\r\n        getCharacterByName\r\n    };\r\n\r\n}\r\n\r\nexport default useMarvelService; ","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n\r\n        setProcess('loading')\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n\r\n            return data;\r\n        } catch (e) {\r\n\r\n            setProcess('error')\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess }\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from '../components/skeleton/Skeleton';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Spinner from '../components/spinner/SpinnerMain'\r\n\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","lenght","charId","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","content","Search","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_thransformCharacter","character","getAllComics","_transformComics","getComic","title","pageCount","path","extension","language","textObjects","price","prices","slice","urls"],"sourceRoot":""}